<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Test Driven Domination]]></title>
  <link href="http://www.testdrivendomination.com/atom.xml" rel="self"/>
  <link href="http://www.testdrivendomination.com/"/>
  <updated>2013-02-17T12:16:42-05:00</updated>
  <id>http://www.testdrivendomination.com/</id>
  <author>
    <name><![CDATA[Joe Leo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Toward an MSpec Coding Convention]]></title>
    <link href="http://www.testdrivendomination.com/blog/2013/01/20/toward-an-mspec-coding-convention/"/>
    <updated>2013-01-20T00:17:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2013/01/20/toward-an-mspec-coding-convention</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Svn: For People Who Won't Let Go of Git]]></title>
    <link href="http://www.testdrivendomination.com/blog/2013/01/03/git-svn-for-people-who-wont-let-go-of/"/>
    <updated>2013-01-03T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2013/01/03/git-svn-for-people-who-wont-let-go-of</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif;"><span style="line-height: 17.28333282470703px;">I&#8217;ve been using Git-Svn for awhile now at work because after using Git every day at my old job, I just couldn&#8217;t go back. I&#8217;m hooked, and the prospect of using TortoiseSVN made me sad. So I hammered away trying to install, configure, and run Git-Svn on Cygwin.&nbsp;</span></span><span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif;"><span style="line-height: 17.28333282470703px;">At some point I wrote up my experiences and shared them with my teammates. The result: we have three people successfully using Git-Svn and, very recently, started a project using full, pure Git! Git-Svn is in pretty wide use now and most of this can be dug up online pretty easily. But I&#8217;ll post it here in the hopes that it helps someone out at some point.</span></span><br /><span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: x-small;"><span style="line-height: 17.28333282470703px;"><br /></span></span><br /><h5 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.1em; margin: 0px 0px 0.1em; padding: 0px;"><span style="font-size: 1.4em;">Why Git?</span></h5><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">I&#8217;m not answering this.&nbsp;<a data-mce-href="http://lmgtfy.com/?q=why+git%3F" href="http://lmgtfy.com/?q=why+git%3F" style="color: rgb(0, 109, 175) !important; outline: none;">Seriously.</a>&nbsp;Git has been around since 2005. I know that for me, no amount of talking or reading convinced me git was better than any other VCS. Then I tried it. Try it.</div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Why git-svn?</h3><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">Better question. The status quo around here is to use Subversion for version control. There are worse things. SVN usually seems like the best thing to use until you use Git. As it turns out, git-svn is a full-fledged SVN client wrapper. That is, whatever Subversion can do, git-svn can do.</div><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">The result, when done properly, is a git client on your machine to do all the local branching, merging, and committing that you want. When you&#8217;re ready, a simple command will push your changes to the Subversion repository.</div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Why Listen to Joe? He Looks Weird.</h3><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">Also a fair question and observation. I am not a git expert. I&#8217;ve simply used it for a couple of years and think it&#8217;s the best product out there for version control. As of this writing, I&#8217;ve been using git-svn for nearly six months and have found it to be a great experience. What&#8217;s more, you likely won&#8217;t have to bang your head against the wall trying to figure out how to use it because I&#8217;ve taken the time to do that for you. This Wiki page is far from comprehensive, but I&#8217;ll happily answer any questions you have and even try to fix any issues that you encounter.</div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Getting Started</h3><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">To start, you&#8217;ll need Git. You&#8217;ll preferably want a version &gt;= 1.7.0. Git can be installed via&nbsp;<a data-mce-href="http://www.cygwin.com/" href="http://www.cygwin.com/" style="color: rgb(0, 109, 175) !important; outline: none;">Cygwin</a>&nbsp;and this is the route I&#8217;ve chosen. All of my examples are based on Git version 1.7.9 on Cygwin running on Windows 7.</div><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">But you can also download a client for your system from the&nbsp;<a data-mce-href="http://git-scm.com/" href="http://git-scm.com/" style="color: rgb(0, 109, 175) !important; outline: none;">Git website</a>. There&#8217;s even a&nbsp;<a data-mce-href="http://code.google.com/p/tortoisegit/" href="http://code.google.com/p/tortoisegit/" style="color: rgb(0, 109, 175) !important; outline: none;">TortoiseGit&nbsp;</a>for those of you who want an easy transition from TortoiseSVN.</div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Cloning Your Repository</h3><pre style="color: #333333; font-size: 13px; line-height: 17.33333396911621px; overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">git svn clone http://path/to/your/repo</pre><span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px;"><br />BEWARE: If your repository is huge or you have a huge number of commits this is going to take a LONG time! One way to get around this is to clone just the latest commit:</span><br /><div><span style="color: #333333; font-family: monospace; font-size: x-small;"><span style="line-height: 17.33333396911621px; white-space: pre-wrap;"><br /></span></span></div><div><pre style="color: #333333; font-size: 13px; line-height: 17.33333396911621px; overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">git svn init http://path/to/your/repo<br />git svn fetch -r $REVISION_NUMBER</pre><pre style="color: #333333; font-size: 13px; line-height: 17.33333396911621px; overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;"></pre><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">Both approaches will continue to track your history from this point forward.</div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Workflow</h3><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; margin-bottom: 10px; padding: 0px;">Your typical git workflow will fit just fine in the git-svn world. However, you&#8217;ll want to keep a couple of extra commands handy for managing the transition from your git commits to the central SVN repo. Here is my typical hacking scenario:<br /><br /><br /><pre style="line-height: 17.33333396911621px; overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">git checkout master<br />git svn rebase<br />git checkout -b feature-branch<br /><br />#Hack, hack, hack<br /><br />git ci . -m "GRT-999: Finishing the hackathon."<br /><br />git checkout master<br />git svn rebase<br /><br />git checkout feature-branch<br />git rebase master<br />git svn dcommit</pre></div><span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px;">The last statement is functionally equivalent to &#8216;git push&#8217; and will move your local changes to the repository. git-svn will make a Subversion commit for every one of your commits, which means you might generate a backup of builds if you&#8217;re a frequent git committer (like me). However, you can also avoid that and roll all of your commits up into one subversion commit by doing the following:</span></div><div><span style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px;"><br /></span></div><div><pre style="color: #333333; font-size: 13px; line-height: 17.33333396911621px; overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">git ci --amend --all</pre></div><div><h3 style="font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 1.4em; margin: 1.5em 0px 0.5em; padding: 0px;">Extras</h3><ul style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; list-style-position: outside; margin-bottom: 10px; margin-left: 0px; margin-top: 0px; padding-left: 3em; padding-top: 0px;"><li style="font-size: 10pt; line-height: 13pt; margin: 0px; padding: 0px;"><div style="font-size: 10pt; line-height: 13pt; margin-bottom: 10px; padding: 0px;">Here&#8217;s what I add to my .git/config file to make working with git even easier:<br /><br /><pre style="overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;"></pre><pre style="overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">[alias]<br />        st = status<br />        ci = commit<br />        co = checkout<br />        df = diff<br />[color]<br />        branch = auto<br />        diff = auto<br />        interactive = auto<br />        status = auto</pre><br /></div></li></ul><ul style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; list-style-position: outside; margin-bottom: 10px; margin-left: 0px; margin-top: 0px; padding-left: 3em; padding-top: 0px;"><li style="font-size: 10pt; line-height: 13pt; margin: 0px; padding: 0px;"><div style="font-size: 10pt; line-height: 13pt; margin-bottom: 10px; padding: 0px;">You&#8217;ll find that you&#8217;re using the above git-svn commands quite often. I set up a few quick bash aliases to save me all the typing:</div><div style="font-size: 10pt; line-height: 13pt; padding: 0px;"><br /><pre style="overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">alias grm='git rebase master'<br />alias gcm='git co master'<br />alias gsd='git svn dcommit'<br />alias gsr='git svn rebase'<br />alias gs='git stash'<br />alias gsp='git stash pop'<br />alias st='git status'</pre></div></li></ul><ul style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; list-style-position: outside; margin-bottom: 10px; margin-left: 0px; margin-top: 0px; padding-left: 3em; padding-top: 0px;"><li style="font-size: 10pt; line-height: 13pt; margin: 0px; padding: 0px;"><div style="font-size: 10pt; line-height: 13pt; margin-bottom: 10px; padding: 0px;">It&#8217;s a good idea to keep a .gitignore file (which is how git keeps track of, well, ignored files) in your repository so that other people using git-svn can benefit. To set it up for the first time, you can use the following command to parse all of your SVN ignores and push them into .gitignore:</div><div style="font-size: 10pt; line-height: 13pt; padding: 0px;"><br /><pre style="overflow: visible; padding: 0px; tab-size: 4; white-space: pre-wrap;">git svn show-ignore &gt;&gt; .gitignore</pre><br /><br />BEWARE: This command takes a VERY LONG time, but it only has to be run once. From that point on you can edit the .gitignore file using Vim/your favorite editor.</div></li></ul><div style="color: #333333; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13.333333969116211px; line-height: 17.314815521240234px; padding: 0px;"></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails from Thin Air on RHEL 5]]></title>
    <link href="http://www.testdrivendomination.com/blog/2012/12/29/rails-from-thin-air-on-rhel-5/"/>
    <updated>2012-12-29T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2012/12/29/rails-from-thin-air-on-rhel-5</id>
    <content type="html"><![CDATA[<div class='post'>
<br />I&#8217;m completing a draconian exercise which is teaching me many lessons about installation and configuration whether I like it or not. The best I can do, as I struggle along, is to write about my experience. I certainly don&#8217;t want to have to do this again from scratch, so after I complete each step I&#8217;m adding it to a script.<br /><br />The scene: I work for a very big company. Like many big companies, there are many rules in place that govern access to particular machines. I am starting a brand new Rails project and have had to overcome a number of obstacles to ready my team for deployment. Here are the bullet points:<br /><br /><ul><li>A cluster of Red Hat Enterprise Linux Servers, release 5.6 (Tikanga)</li><li>Bash</li><li>wget</li><li>No root access</li><li>No ability to use sudo, ever</li></ul><br />The requirement, a working Ruby and Rails project, has a handful of dependencies: libxml2, libxslt, bz2, SQLite3 version &gt;= 3.6, Python version &gt;= 2.6. None of these are installed with RHEL 5 out of the box, so I&#8217;m going to build all of them.<br /><br /><b>Setting up in vendor/</b><br />First I&#8217;ll create a directory underneath my vendor/ directory in RAILS_HOME because &#8221;<a href="http://ryan.mcgeary.org/2011/02/09/vendor-everything-still-applies/" target="_blank">vendor everything still applies</a>.&#8221; I call it setup/. Here is where I will put everything my server needs to run my application. I&#8217;ll have my installation script and src/ and local/ directories.<br /><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">joe@warpaint:~/dev/tddominate/vendor$ ls</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">setup &nbsp;setup_env.bat &nbsp;src</span></span><br /><br />Next it&#8217;s time to create a bash script. I set it to exit on any command failure with set -e and create some variables, beginning with SETUP_DIR. SETUP_DIR is set to be the directory where I&#8217;ve written my script, regardless of the location from which the script is executed (<a href="http://stackoverflow.com/a/246128/1617395" target="_blank">thanks to StackExchange</a> for help with this):<br /><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">#!/bin/bash</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">set -e</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">SETUP_DIR=&#8221;$( cd &#8220;$( dirname &#8220;${BASH_SOURCE[0]}&#8221; )&#8221; &amp;&amp; pwd )&#8221;</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">SETUP_DIR_SRC=&#8221;$SETUP_DIR/src&#8221;</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">SETUP_DIR_LOCAL=&#8221;$SETUP_DIR/local</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">mkdir -p $SETUP_DIR_LOCAL</span></span><br /><span style="background-color: #cccccc;"><br /></span><b>Ruby and Rubygems</b><br />Ruby and Rubygems are easy installs for me despite my inability to use RVM on these machines (permission issue).<br /><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">tar xzvf ruby-1.9.3-p327.tar.gz</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd ruby-1.9.3-p327</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">./configure &#8211;prefix=/my/location/ruby 15 make</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">make install</span></span><br /><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">echo &#8220;export PATH=/my/location/ruby/bin:$PATH&#8221; &gt;&gt; ~/.bashrc</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">echo &#8220;export HTTP_PROXY=http://proxy.net:8080&#8221; &gt;&gt; ~/.bashrc</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">echo &#8220;export HTTPS_PROXY=https://proxy.net:8080&#8221; &gt;&gt; ~/.bashrc</span></span><br /><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">. ~/.bashrc</span></span><br /><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"><br /></span><br /><div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">tar xvf rubygems-1.8.24.tar</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd rubygems-1.8.24</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">ruby setup.rb &#8211;prefix=/my/location</span></span></div><div><br /></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">gem install bundler</span></span></div><div><br /></div><div>I set the HTTP_PROXY and HTTPS_PROXY environment variables so that rubygems can do its thing.</div><div><br /></div><div><b>Prepare for Nokogiri (building libxml2 and libxslt from source)</b></div><div>OK, enough of the easy stuff. Enter libxml and libxslt. With no rpm and no sudo, I&#8217;m going to have to get my hands dirty:</div><div><br /></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">wget ftp://xmlsoft.org/libxml2/libxml2-2.7.8.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">tar xzvf libxml2-2.7.8.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC/libxml2-2.7.8</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">./configure &#8211;prefix=$SETUP_DIR_LOCAL ; make ; make install</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;"><br /></span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">wget ftp://xmlsoft.org/libxml2/libxslt-1.1.28.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">tar xzvf libxslt-1.1.28.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd $SETUP_DIR_SRC/libxslt-1.1.28</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">./configure &#8211;prefix=$SETUP_DIR_LOCAL \&nbsp;</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &#8211;with-libxml-prefix=$SETUP_DIR_LOCAL \&nbsp;</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &#8211;with-libxml-include-prefix=$SETUP_DIR_LOCAL/include \&nbsp;</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &#8211;with-libxml-libs-prefix=$SETUP_DIR_LOCAL/lib</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">make ; make install</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;"><br /></span></span></div><div>If you prayed to the right Linux gods, this will work for you with a little tinkering. Next I&#8217;ll add the right configuration to bundler for install time. Note that the libxml2 specified is the source directory and the libxslt specified is the installation directory.</div><div><br /></div><div><span style="font-family: Courier New, Courier, monospace;"><span style="background-color: #cccccc;">bundle config build.nokogiri &#8211;with-xml2-dir=$SETUP_DIR_SRC/libxml2-2.7.8 &#8211;with-xslt-dir=$SETUP_DIR_LOCAL</span></span></div><div><br /></div><div><b>Runtime for ExecJS</b></div><div>Now you&#8217;re all set to bundle install. Your gems install flawlessly. You&#8217;re tempted to celebrate. Then you run rspec. Or rails s. Or rake. And you still have problems. Something in the way of:</div><div><br /></div><div><span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.</span></div></div><div><br /></div><div><div>I still have work to do.</div><div><br /></div><div>Sam Stephenson and Josh Peek created something awesome with <a href="https://github.com/sstephenson/execjs" target="_blank">ExecJS</a>. They are the ones that make executing Javascript through Ruby possible. Under the hood, in almost everything we do in Rails applications these days, ExecJS is there. It&#8217;s a workhorse akin to Nokogiri. There&#8217;s just one thing they ask of you to get started - that you actually have a Javascript runtime! Your Gemfile is already giving you a hint:</div><div><br /></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"># See https://github.com/sstephenson/execjs#readme for more supported runtimes</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"># gem &#8216;therubyracer&#8217;</span></div><div><br /></div><div>As noted, there are other runtime options, but in order to build the dependencies &#8211; in this case libv8 &#8211; I need to upgrade my version of Python to 2.7. On a debian system,&nbsp;Python does not come with bz2 support out of the box. It has to be configured to do this.&nbsp;Red Hat 5 does not come with the bz2 developer library, just the binaries. So I&#8217;ll download and build it.&nbsp;</div><div><br /></div><div>There is a specific way to build bz2 so that it shares its libraries with others (like Python) and trying to figure it out nearly drained my remaining life force. I have to make and install bz2 twice, strange though it may seem. This is so it knows to build a shared library that on which Python depends. &nbsp;Since I am building bz2 and installing it in a custom location (using the PREFIX option), I &nbsp;then need to tell Python where it&#8217;s been installed. Borrowing heavily from a script and <a href="http://rajaseelan.com/2012/01/28/installing-python-2-dot-7-2-on-centos-5-dot-2/#disqus_thread" target="_blank">blog post by @rajaleen</a>, here&#8217;s what I did:</div><div><br /></div><div>I export my PREFIX as an environment variable:</div><div><br /></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">export PREFIX=/path/to/custom_install</span></span></div><div><br /></div><div>Make and install bz2 twice</div><div><div><br /></div></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make -f Makefile_libbz2_so</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make install PREFIX=$PREFIX</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make install PREFIX=$PREFIX</span></div><div><br /></div><div>I set the necessary environment variables for Python compilation:</div><div><br /></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">export C_INCLUDE_PATH=/path/to/custom_install/include</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">export CPLUS_INCLUDE_PATH=$C_INCLUDE_PATH</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">export LIBRARY_PATH=/path/to/custom_install/lib</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">export LD_RUN_PATH=$LIBRARY_PATH</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"><br /></span></div><div><span style="background-color: white; font-family: Times, Times New Roman, serif;">Finally, I use the &#8211;enable-shared option when configuring Python. This tells Python to build both its static and dynamic libraries:</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"><br /></span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">cd Python-2.7.3</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">./configure &#8211;prefix=$PREFIX &#8211;enable-shared</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">make install</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;"><br /></span></div><div>Now our gem install libv8 works flawlessly and I &nbsp;uncomment gem &#8216;therubyracer&#8217; from our Gemfile and add a requirement for libv8:</div><div><br /></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">gem &#8216;libv8&#8217;&nbsp;</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">gem &#8216;therubyracer&#8217;&nbsp;</span></span></div><div><br /></div><div><b>SQLite3 is laughably outdated</b></div><div>bundle install works flawlessly once again, and when I run rspec, the specs run! But they are failing for strange reasons:</div><div><br /></div><div><span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">Failure/Error: environment = Environment.make! ActiveRecord::StatementInvalid: SQLite3::SQLException: near &#8220;SAVEPOINT&#8221;: syntax error: SAVEPOINT active_record_1</span></div><div><br /></div><div><div>From the SQLite3 documentation: &nbsp;&#8220;SAVEPOINTs are a method of creating transactions, similar to BEGIN and COMMIT, except that the SAVEPOINT and RELEASE commands are named and may be nested.&#8221; SAVEPOINTs have been supported since version 3.6.8. However, my RHEL 5 machine (and I believe all others as well) comes bundled with version 3.3.6, which was released in June of 2006. Time to upgrade.</div><div><br /></div><div>Actually, this was part of the process was pleasantly easy with only one catch. I&#8217;m going to configure and install SQLite3 with our &#8211;prefix the same as always:</div><div><br /></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">wget http://www.sqlite.org/sqlite-autoconf-3071501.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">tar xzvf sqlite-autoconf-3071501.tar.gz</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">cd sqlite-autoconf-3071501</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">./configure &#8211;prefix=$PREFIX</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">make</span></span></div><div><span style="background-color: #cccccc;"><span style="font-family: Courier New, Courier, monospace;">make install</span></span></div><div><br /></div><div>When I run rspec, I still see the same errors. This is because the sqlite3 gem needs to be reconfigured. My method: uninstall/reinstall, and tell bundler about my configurations:</div><div><br /></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">bundle exec gem uninstall sqlite3</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">bundle config build.sqlite3 &#8211;with-sqlite3-dir=$PREFIX</span></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">bundle install</span></div><div><br /></div><div>One potential roadblock that may occur is the following when you try to run your specs:</div><div><br /></div><div><span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">sqlite3-ruby-1.3.1/lib/sqlite3/sqlite3_native.so: undefined symbol:&nbsp;</span></div><div><span style="font-family: Helvetica Neue, Arial, Helvetica, sans-serif;">sqlite3_initialize&nbsp;</span></div><div><br /></div><div>The solution comes <a href="https://groups.google.com/forum/#!msg/sqlite3-ruby/crbvv358SeY/fY_-c3y134IJ" target="_blank">courtesy of Aaron Patterson</a>. To make the sqlite3 gem play nicely, I &nbsp;need to add my PREFIX/lib directory to the LD_LIBRARY_PATH:</div><div><br /></div><div><span style="background-color: #cccccc; font-family: Courier New, Courier, monospace;">export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH</span></div><div><br /></div><div>Finally, I&#8217;m at the finish line. I run rspec:</div><div><br /></div><div><br /></div><div>&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.</div><div><br /></div><div><br /></div><div><br /></div><div><div>Finished in 1.02 seconds</div><div>31 examples, 0 failures, 0 pending</div><div><br /></div><div><br /></div><div><b>Ahh, that&#8217;s the stuff! Happy coding!</b></div></div></div></div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git While The Gitting's Good]]></title>
    <link href="http://www.testdrivendomination.com/blog/2012/12/20/git-while-gittings-good/"/>
    <updated>2012-12-20T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2012/12/20/git-while-gittings-good</id>
    <content type="html"><![CDATA[<div class='post'>
I saw an opening and I went for it.<br /><br />After using git-svn for the past 5 months in a desperate attempt to keep my sanity in the face of a massive subversion repository, my team got a greenfield project. I honestly couldn&#8217;t help myself. &#8220;Ruby! Rails! Git! I&#8217;m on it!&#8221; So I became our&nbsp;<i>de facto </i>devops guy for a brand spanking new project, tasked with everything from configuring OpenSSH to installing Ruby and Rails on a severely locked down Windows system (many thanks once again to <a href="https://twitter.com/luislavena" target="_blank">Luis Lavena</a> and <a href="http://wayneeseguin.wordpress.com/" target="_blank">Wayne Seguin</a>&nbsp;for making this possible) to learning about <a href="http://code.google.com/p/tortoisegit/" target="_blank">TortoiseGit </a>to make our existing ToroiseSVN users feel comfortable.<br /><br />For Git we&#8217;re using a standard SSH provisioning system on a remote repository. But my company does not allow Git on their central servers so our repository is hosted on a flaky VM with no guaranteed backups or failovers. That won&#8217;t do. To solve this, I decided to add the entire repository to my existing SVN repository.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Xk7_Yw5rDfQ/UNM88m-m-1I/AAAAAAAAAqE/zZi9Z9N6NlI/s1600/blog1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="47" src="http://1.bp.blogspot.com/-Xk7_Yw5rDfQ/UNM88m-m-1I/AAAAAAAAAqE/zZi9Z9N6NlI/s320/blog1.png" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-FCbucsxkE3s/UNM9AiCQw3I/AAAAAAAAAqM/vqC7xBRePIE/s1600/blog2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="40" src="http://3.bp.blogspot.com/-FCbucsxkE3s/UNM9AiCQw3I/AAAAAAAAAqM/vqC7xBRePIE/s640/blog2.png" width="640" /></a></div><br />Now that we&#8217;re official, I want to make sure that I keep backing things up. Here&#8217;s a script I adapted from an <a href="http://stackoverflow.com/questions/758916/how-to-make-subversion-or-any-program-perform-periodic-commits/759521#759521" target="_blank">answer on StackExchange</a>&nbsp;(thanks <a href="http://robertmassaioli.wordpress.com/" target="_blank">Robert Massaoli</a>):<br /><br /><br /><span style="font-family: Courier New, Courier, monospace;">#!/bin/bash</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">cd ..</span><br /><span style="font-family: Courier New, Courier, monospace;">while [ 1 ]</span><br /><span style="font-family: Courier New, Courier, monospace;">do</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; svn add &#8211;force deployer.git/</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; svn commit -m &#8220;GRT-0: Autocommitting deployer.git&#8221;</span><br /><span style="font-family: Courier New, Courier, monospace;"><br /></span><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; sleep 600</span><br /><span style="font-family: Courier New, Courier, monospace;">done</span><br /><div><br /></div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expecting (and Handling) the Unexpected]]></title>
    <link href="http://www.testdrivendomination.com/blog/2012/12/18/expecting-and-handling-unexpected/"/>
    <updated>2012-12-18T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2012/12/18/expecting-and-handling-unexpected</id>
    <content type="html"><![CDATA[<div class='post'>
In <a href="http://testdrivendomination.blogspot.com/2012/12/exceptionally-lazy.html" target="_blank">an earlier post</a> I mentioned that I&#8217;m creating an unhandled exception manager inspired by <a href="http://www.codeproject.com/Articles/7482/User-Friendly-Exception-Handling" target="_blank">Jeff Atwood&#8217;s Friendly Exception Manager</a>. A couple of days ago we found a bug that crashed our application in UAT. Much to my dismay, no friendly exception message whatsoever was displaying for the user under these circumstances. But how could this be? I&#8217;m catching all unhandled exceptions for this very purpose!<br /><br />Or am I? As it turns out, I was catching most, but not all, types of unhandled exceptions. Here&#8217;s where I started:<br /><pre class="csharpcode">        <span class="kwrd">public</span> <span class="kwrd">void</span> AddHandler()<br />        {<br />            Application.ThreadException += ThreadExceptionHandler;<br />        }</pre><pre class="csharpcode"></pre>This is pretty simple and is ideally the first method called in your application after initializing your unhandled exception manager. (Those intimately familiar with Jeff Atwood&#8217;s version will notice that his exception managers are purely static. None of my objects are static and there are all kinds of interfaces and small helper objects in place, but the spirit remains the same.) The ThreadException event deals specifically with the UI thread. The handler is where the user notification takes place. However, there are two items that are unaccounted for.<br /><br />First, my application is a combination of WPF and WinForms. The unhandled exception that crashed our application occurred in WinForms. Windows Forms errors do not behave the same way as ThreadExceptions by default and need to be told what to do.&nbsp;MSDN does&nbsp;<a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.application.setunhandledexceptionmode(v=vs.100).aspx" target="_blank">a nice job of illustrating</a>&nbsp;this somewhat confusing concept.&nbsp;The second thing I neglected was defining the behavior of non-UI thread exceptions. Our application relies heavily on the <a href="http://msdn.microsoft.com/en-us/library/dd460717.aspx" target="_blank">TPL library</a>&nbsp;which gives us a big reason to be concerned with non-UI thread behavior. Luckily, we can relatively easily handle everything listed above with a few lines of code and an extra event handler (which, in my case, mirrors the functionality of the handler discussed above). The finished code looks like this:<br /><pre class="csharpcode">        <span class="kwrd">public</span> <span class="kwrd">void</span> AddHandler()<br />        {<br />            Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);<br />            AppDomain.CurrentDomain.UnhandledException += UnhandledExceptionHandler;<br />            Application.ThreadException += ThreadExceptionHandler;<br />        }</pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exceptionally Lazy]]></title>
    <link href="http://www.testdrivendomination.com/blog/2012/12/06/exceptionally-lazy/"/>
    <updated>2012-12-06T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2012/12/06/exceptionally-lazy</id>
    <content type="html"><![CDATA[<div class='post'>
<head><link href="csharp.css" rel="stylesheet" type="text/css"></link></head>I&#8217;m working on a .NET project and have been building an Unhandled Exception Manager in the <a href="http://www.codeproject.com/Articles/7482/User-Friendly-Exception-Handling" target="_blank">spirit of Jeff Atwood&#8217;s friendly exception handling</a>. If a user encounters an error that will crash our application, the Unhandled Exception Manager steps in first and issues a friendly message. In the background it emails the development team about the exception in as much detail as it can possibly grab.<br /><br />Recently some unwanted functionality gave me the opportunity to learn about lazy evaluation in C#. Look at the following code:<br /><!-- code formatted by http://manoli.net/csharpformat/ --><pre class="csharpcode"><span class="kwrd">return</span> MultiLine(<br /><span class="str">    "Date and Time:         "</span> + DateTime.Now,<br /><span class="str">    "Machine Name:          "</span> + Environment.MachineName,<br /><span class="str">    "IP Address:            "</span> + Dns.GetHostEntry(Dns.GetHostName()).AddressList[0],<br /><span class="str">    "Application Domain:    "</span> + AppDomain.CurrentDomain.FriendlyName,<br />    <span class="str">"Assembly Codebase:     "</span> + _assemblyInfo.CodeBase,<br />    <span class="str">"Assembly Full Name:    "</span> + _assemblyInfo.FullName,<br />    <span class="str">"Assembly Version:      "</span> + _assemblyInfo.Version,<br />    EnhancedStackTrace(<span class="kwrd">new</span> StackTrace(<span class="kwrd">true</span>))<br /> );</pre><br />Multiline simply aggregates the lines so that I can print pretty messages both in the code and in my emails:<br /><br /><!-- code formatted by http://manoli.net/csharpformat/ --><pre class="csharpcode"><span class="kwrd">static</span> <span class="kwrd">string</span> MultiLine(<span class="kwrd">params</span> <span class="kwrd">string</span>[] args)<br />{<br /><span class="kwrd">    return</span> <span class="kwrd">string</span>.Join(Environment.NewLine, args);<br />}</pre><br />If any one of these nested calls throws an exception, we get an <b>unhandled exception</b> in the <b>unhandled exception manager</b>. Not good. Wrapping the whole thing in a <span style="font-family: Courier New, Courier, monospace;">try/catch</span> prevents this but will not give us the maximum amount of information. If <span style="font-family: Courier New, Courier, monospace;">Dns.GetHostName</span> returns null, for example, it would still be nice to get the <span style="font-family: Courier New, Courier, monospace;">MachineName </span>and assembly information. The following MSpec test illustrates the problem:<br /><br /><!-- code formatted by http://manoli.net/csharpformat/ --> <br /><pre class="csharpcode">[Subject(<span class="kwrd">typeof</span> (ExceptionMessageBuilder), <span class="str">"SystemInfo"</span>)]<br /><span class="kwrd">class</span> when_an_exception_is_thrown : ExceptionMessageBuilderSpec<br />{<br /><span class="kwrd">    private</span> <span class="kwrd">static</span> Exception Exception;<br />    <span class="kwrd">private</span> <span class="kwrd">static</span> Version Version;<br /><br />    <span class="kwrd">private</span> Establish context = () =&gt;<br />        {<br />            Exception = <span class="kwrd">new</span> Exception();<br />            Version = <span class="kwrd">new</span> Version(1, 0, 0, 254);<br />            AssemblyInfo.WhenToldTo(x =&gt; x.FullName).Throw(Exception);<br />            AssemblyInfo.WhenToldTo(x =&gt; x.Version).Return(Version);<br />        };<br /><br />    <span class="kwrd">private</span> It will_handle_the_exception = () =&gt; ExceptionMessageBuilder.SystemInfo();<br />}</pre><br />I was able to make this test pass and extract the maximum amount of information about my application crash using lazy evaluation:<br /><br /><!-- code formatted by http://manoli.net/csharpformat/ --> <br /><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">string</span> SystemInfo()<br />{<br /><span class="kwrd">    return</span> MultiLazy(<span class="kwrd">new</span> List&lt;Lazy&lt;<span class="kwrd">string</span>&gt;&gt;<br />        {<span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Date and Time:         "</span> + AppDomain.CurrentDomain.FriendlyName),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Machine Name:          "</span> + Environment.MachineName),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"IP Address:            "</span> + Dns.GetHostEntry(Dns.GetHostName()).AddressList[0]),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Application Domain:    "</span> + AppDomain.CurrentDomain.FriendlyName),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Assembly Codebase:     "</span> + _assemblyInfo.CodeBase),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Assembly Full Name:    "</span> + _assemblyInfo.FullName),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; <span class="str">"Assembly Version:      "</span> + _assemblyInfo.Version),<br />         <span class="kwrd">new</span> Lazy&lt;<span class="kwrd">string</span>&gt;(() =&gt; EnhancedStackTrace(<span class="kwrd">new</span> StackTrace(<span class="kwrd">true</span>)))<br />     });<br />}</pre><br />Using the <span style="font-family: Courier New, Courier, monospace;">Lazy&lt;&gt;</span> syntax, I can state my intentions without executing any of the code. Instead, the CLR compiles the code and waits for <span style="font-family: Courier New, Courier, monospace;">.Value</span> to be called on the arguments before executing. &nbsp;A change to our <span style="font-family: Courier New, Courier, monospace;">MultiLine </span>function demonstrates this in action:<br /><br /><!-- code formatted by http://manoli.net/csharpformat/ --> <br /><pre class="csharpcode"><span class="kwrd">static</span> <span class="kwrd">string</span> MultiLazy(List&lt;Lazy&lt;<span class="kwrd">string</span>&gt;&gt; args)<br />{<br /><span class="kwrd">    var</span> stringBuilder = <span class="kwrd">new</span> StringBuilder();<br />    <span class="kwrd">foreach</span> (<span class="kwrd">var</span> arg <span class="kwrd">in</span> args)<br />    {<br />        <span class="kwrd">try</span><br />        {<br />            stringBuilder.Append(arg.Value);<br />        }<br /><span class="rem">// ReSharper disable EmptyGeneralCatchClause -- we want all the information we can get.</span><br />        <span class="kwrd">catch</span> (Exception) {}<br /><span class="rem">// ReSharper restore EmptyGeneralCatchClause</span><br />        }<br />        <span class="kwrd">return</span> stringBuilder.ToString();<br />}</pre><br />Of course, this is my first attempt at lazy evaluation in C# and I&#8217;m open to other methods. Could this be cleaned up? Are there better approaches out there?<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remap Resharper Keyboard Shortcuts]]></title>
    <link href="http://www.testdrivendomination.com/blog/2012/12/05/remap-resharper-keyboard-shortcuts/"/>
    <updated>2012-12-05T00:00:00-05:00</updated>
    <id>http://www.testdrivendomination.com/blog/2012/12/05/remap-resharper-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family: Arial, Helvetica, sans-serif;">I recently spent 20 minutes figuring this out, so hopefully someone googling will be able to figure it out faster.</span><br /><div><span style="font-family: Arial, Helvetica, sans-serif;"><br /></span></div><div><span style="font-family: Arial, Helvetica, sans-serif;">Using Resharper in Visual Studio 2010, I want to see the implementation of a method way more often than I want to see it&#8217;s definition. </span><span style="font-family: Courier New, Courier, monospace;">Ctrl +B</span><span style="font-family: Arial, Helvetica, sans-serif;"> will take you to the definition, but if you use lots of interfaces this command is less helpful. </span><span style="font-family: Courier New, Courier, monospace;">Ctrl + Shift + Alt + B</span><span style="font-family: Arial, Helvetica, sans-serif;"> will take you to the implementation of that method, where the business logic lives.</span></div><div><span style="font-family: Arial, Helvetica, sans-serif;"><br /></span></div><div><span style="font-family: Arial, Helvetica, sans-serif;">So here&#8217;s how to replace GotoDefinition with GotoImplentation:</span></div><div><span style="font-family: Arial, Helvetica, sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-kSTPtKI5TVs/UL-_7lKZq9I/AAAAAAAAAdY/-rt5dHN-v1w/s1600/goto_declaration.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><span style="font-family: Arial, Helvetica, sans-serif;"><img border="0" height="189" src="http://2.bp.blogspot.com/-kSTPtKI5TVs/UL-_7lKZq9I/AAAAAAAAAdY/-rt5dHN-v1w/s320/goto_declaration.PNG" width="320" /></span></a></div><div><span style="font-family: Arial, Helvetica, sans-serif;"><br /></span></div><div><ol><li><span style="font-family: Arial, Helvetica, sans-serif;">Open Tools -&gt; Options -&gt; Environment -&gt; Keyboard.</span></li><li><span style="font-family: Arial, Helvetica, sans-serif;">Under &#8220;Show commands containing:&#8221; type&nbsp;</span><span style="font-family: Courier New, Courier, monospace;">Resharper.Resharper_GotoDefinition</span><span style="font-family: Arial, Helvetica, sans-serif;">. Press the Remove button. Now search for&nbsp;</span><span style="font-family: Courier New, Courier, monospace;">Resharper.Resharper_GotoImplementation</span><span style="font-family: Arial, Helvetica, sans-serif;">&nbsp;and do the same thing.</span></li><li><span style="font-family: Arial, Helvetica, sans-serif;">Under &#8220;Press shortcut keys,&#8221; press </span><span style="font-family: Courier New, Courier, monospace;">Ctrl + B</span><span style="font-family: Arial, Helvetica, sans-serif;">. Press the Assign button.</span></li><li><span style="font-family: Arial, Helvetica, sans-serif;">If you&#8217;d still like a shortcut for GotoDefinition, search again for&nbsp;</span><span style="font-family: Courier New, Courier, monospace;">Resharper.Resharper_GotoDefinition</span><span style="font-family: Arial, Helvetica, sans-serif;">, and follow step 3, this time pressing </span><span style="font-family: Courier New, Courier, monospace;">Ctrl + Shift + Alt + B</span><span style="font-family: Arial, Helvetica, sans-serif;">.</span></li><li><span style="font-family: Arial, Helvetica, sans-serif;">Press OK. You&#8217;re all set.</span></li></ol></div><div><span style="font-family: Arial, Helvetica, sans-serif;">UPDATE: 12/6</span><br /><span style="font-family: Arial, Helvetica, sans-serif;"><br /></span><span style="font-family: Arial, Helvetica, sans-serif;">A friend Andreas had the following to add:</span><br /><br /><br /><div class="MsoNormal"><span lang="EN-GB" style="color: #1f497d; mso-ansi-language: EN-GB;"><span style="font-family: Arial, Helvetica, sans-serif;">Just two comments on the key sequence: We’ve actually got a term here in London for the Ctrl + Shift + Alt, because it’s such a mouthful when you’re trying to communicate it to someone who you’re pairing with. We call it (I kid you not) “banana”, cause, you know, the keys are kinda arranged in that shape. So you do occasionally hear people say things like “Banana – B” when coding. <o:p></o:p></span></span></div><div class="MsoNormal"><br /></div><div class="MsoNormal"><span lang="EN-GB" style="color: #1f497d; mso-ansi-language: EN-GB;"><span style="font-family: Arial, Helvetica, sans-serif;">On the topic of bananas – there’s a surprisingly little known shortcut in Resharper. Banana – A over a variable or parameter lets you trace the value origin or destination. So if you’re trying to find out where a parameter actually gets set (or which possible entry points you need to follow), rather than repeatedly following the chains with Alt+F7s or Ctrl-Bs. If you haven’t used it before give it a spin, makes tracing this stuff a lot less tedious.</span><o:p></o:p></span></div></div></div>
]]></content>
  </entry>
  
</feed>
